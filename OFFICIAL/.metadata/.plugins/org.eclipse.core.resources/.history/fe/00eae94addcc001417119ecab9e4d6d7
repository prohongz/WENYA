package Simulator;

import java.awt.Font;

import javax.swing.JPanel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JTabbedPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JButton;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.UIManager;

import finalcut.Constant;
import finalcut.Result;
import javax.swing.ScrollPaneConstants;

@SuppressWarnings("serial")
public class liveupdate extends JPanel implements Runnable {
	
	private static boolean stopthreadVariable = false;
	private Thread runner = null;
	
	
	public liveupdate() {
		
		JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);
		GroupLayout groupLayout = new GroupLayout(this);
		groupLayout.setHorizontalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addComponent(tabbedPane, GroupLayout.PREFERRED_SIZE, 276, GroupLayout.PREFERRED_SIZE)
		);
		groupLayout.setVerticalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addComponent(tabbedPane, GroupLayout.PREFERRED_SIZE, 639, GroupLayout.PREFERRED_SIZE)
		);
		
		JPanel Settingpanel = new JPanel();
		tabbedPane.addTab("Parameters", null, Settingpanel, null);
		
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		
		JButton btnSave = new JButton("Save");
		GroupLayout gl_Settingpanel = new GroupLayout(Settingpanel);
		gl_Settingpanel.setHorizontalGroup(
			gl_Settingpanel.createParallelGroup(Alignment.LEADING)
				.addGroup(Alignment.TRAILING, gl_Settingpanel.createSequentialGroup()
					.addContainerGap(172, Short.MAX_VALUE)
					.addComponent(btnSave)
					.addContainerGap())
				.addGroup(gl_Settingpanel.createSequentialGroup()
					.addContainerGap()
					.addComponent(scrollPane, GroupLayout.PREFERRED_SIZE, 251, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);
		gl_Settingpanel.setVerticalGroup(
			gl_Settingpanel.createParallelGroup(Alignment.LEADING)
				.addGroup(Alignment.TRAILING, gl_Settingpanel.createSequentialGroup()
					.addContainerGap()
					.addComponent(scrollPane, GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(btnSave)
					.addContainerGap())
		);
		
		JTextArea parameter = new JTextArea();
		parameter.setFont(new Font("Calibri", Font.PLAIN, 12));
		parameter.setEditable(false);
		parameter.setBackground(UIManager.getColor("Button.background"));
		parameter.setText("GENERAL\n---------------------------------------------------------------\n" + 
				"Start Time: " + String.format("%02d", Constant.starthour) + ":" + String.format("%02d", Constant.startminute) +
				"\nEnd Day: Day " + Constant.endday +
				"\nEnd Time: " + String.format("%02d", Constant.endhour) + ":" + String.format("%02d", Constant.endminute) + "\n\n");
		parameter.append("CARGO\n---------------------------------------------------------------\n");
				
		parameter.append("CDC\n---------------------------------------------------------------\n" +
				"Operation Hours: " + String.format("%02d", Constant.CDCstarth) + ":" + String.format("%02d", Constant.CDCstartm) + " - " + String.format("%02d", Constant.CDCendh) + ":" + String.format("%02d", Constant.CDCendm) + "\n");
		parameter.append("Cargo processing time: " + Constant.CDCcargoto + " min\n\n");
				
		parameter.append("Factory\n---------------------------------------------------------------\n" +
				"Operation Hours: " + String.format("%02d", Constant.Factstarth) + ":" + String.format("%02d", Constant.Factstartm) + " - " + String.format("%02d", Constant.Factendh) + ":" + String.format("%02d", Constant.Factendm) + "\n");
		parameter.append("Cargo processing time: " + Constant.Factcargoto + " min\n\n");
				
		parameter.append("Truck\n---------------------------------------------------------------\n");
		if(Constant.TruckMode == true){
			parameter.append("Truck Quantity: " + Constant.TruckQty);
			parameter.append("\nTruck Top Speed: " + Constant.TruckSpd);
			parameter.append("\nTruck Acceleration Speed: " + Constant.TruckAccSpd);
			parameter.append("\nTruck Deceleration Speed: " + Constant.TruckDecSpd);
			parameter.append("\nTruck Time Gap: " + Constant.TruckTimeGap);
			parameter.append("\nTruck Distance Gap: " + Constant.TruckDistGap);
			parameter.append("\nTruck Politeness: " + Constant.TruckPoliteness);
			parameter.append("\nTruck Changing Lane duration: " + Constant.TruckChanging + "\n\n");
		}else{
			parameter.append("DISABLED\n\n");
		}
				
		parameter.append("AGV\n---------------------------------------------------------------\n");
		if(Constant.AgvMode == true){
			parameter.append("AGV Quantity: " + Constant.AgvQty);
			parameter.append("\nAGV Top Speed: " + Constant.AgvSpd);
			parameter.append("\nAGV Acceleration Speed: " + Constant.AgvAccSpd);
			parameter.append("\nAGV Deceleration Speed: " + Constant.AgvDecSpd);
			parameter.append("\nAGV Time Gap: " + Constant.AgvTimeGap);
			parameter.append("\nAGV Distance Gap: " + Constant.AgvDistGap + "\n\n");
		}else{
			parameter.append("DISABLED\n\n");
		}
		parameter.setCaretPosition(0);
		
		scrollPane.setViewportView(parameter);
		Settingpanel.setLayout(gl_Settingpanel);
		
		JPanel rtpanel = new JPanel();
		tabbedPane.addTab("Real Time Data", null, rtpanel, null);
		setLayout(groupLayout);
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(!stopthreadVariable){
			
		}
	}
	
	public void start() {
		if (runner == null) {
			runner = new Thread(this);
			runner.start();
		}
	} 
	
	public void stop() {
		stopthreadVariable = true;
	} 
}
